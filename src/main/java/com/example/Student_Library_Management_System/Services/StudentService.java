package com.example.Student_Library_Management_System.Services;

import com.example.Student_Library_Management_System.DTOs.StudentUpdateMobRequestDto;
import com.example.Student_Library_Management_System.Enums.CardStatus;
import com.example.Student_Library_Management_System.Models.Card;
import com.example.Student_Library_Management_System.Models.Student;
import com.example.Student_Library_Management_System.Repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class StudentService {

    @Autowired
    StudentRepository studentRepository ;

    public String createStudent(Student student){

        //Student from the postman is already the basic attributes set


        //card should be autogenerated when createStudent function is called

        //Always set attributes before saving the db
        Card card = new Card() ;
        card.setCardStatus(CardStatus.ACTIVATED);
        card.setStudentVariableName(student);  //foreign key columns attribute value


        //lets go to the student
        student.setCard(card);

        //if there was a unidirectional mapping : we had to save both of them
        //but we are doing /using bidirectional : child will automatically be saved

        studentRepository.save(student) ;
        //by cascading effect , child will automatically be saved .
        return "Student and Card added" ;
    }

    public String findNameByEmail(String email){
        Student student = studentRepository.findByEmail(email) ;
        return student.getEmail() ;
    }

    public String updateMobNo(StudentUpdateMobRequestDto studentReq){

        //Convert the DTO to Entity : saved better

        //First we will try to fetch originalData
        Student originalStudent =studentRepository.findById(studentReq.getId()).get();

        //We will keep try to fetch originalData
        originalStudent.setMobNo(studentReq.getMobNo());


        //Always entity object is being saved.
        studentRepository.save(originalStudent) ;

        return "Student has been updated successfully" ;
    }

    public Student getStudentById(int id){
        return studentRepository.findById(id).get();
    }
}
